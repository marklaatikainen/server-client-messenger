package networking;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import clientsMessenger.Client;
import packet.ChatPacket;
import packet.ConnectPacket;
import packet.Packet;
import packet.PacketDictionary;
import packet.PacketListener;
import packet.PacketType;
import packet.DisconnectPacket;
import packet.ListPacket;

public class NetworkClient {
	private Socket socket;
	private String ipAddress;
	private int serverPort;
	List <String>connectedClientMap = new ArrayList<String>();
	public List<PacketListener> packetListeners = new ArrayList<>();
 	String nickname;

	
	public NetworkClient(String ipAddress, int serverPort) {
		this.ipAddress = ipAddress;
		this.serverPort = serverPort;
	}
	
	public void connectToServer() {
		try {
			socket = new Socket(ipAddress, serverPort);
		} catch (UnknownHostException e) {
			e.printStackTrace();
			return;
		} catch (IOException e) {
			e.printStackTrace();
			return;
		}
	    
	    nickname = JOptionPane.showInputDialog(null, "Enter your username:", "Username", JOptionPane.INFORMATION_MESSAGE);
		try {
			sendPacket(new ConnectPacket(nickname));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		
		
	// client listens for server requests/responses
	new Thread(new Runnable() {
		@Override
			public void run() {
				Client.getInstance().showMessage("<< You are now connected! >>");
				while(true) {
					try {
						Client.getInstance().ableToType(true);
						Client.updateView();
						
						DataInputStream input = new DataInputStream(socket.getInputStream());
						String rawData = input.readUTF();
						String[] data = rawData.trim().split(";");
						PacketType type = PacketType.valueOf(data[0]);
						Packet packet = PacketDictionary.translatePacketType(type, data);
						packetReceived(packet, socket);

						
					} catch (IOException e) {
						Client.getInstance().showMessage("<< Server is offline! >>");
						Client.getInstance().ableToType(false);
						e.printStackTrace();
						break;
					}
				}
			}
		}).start();
	}
	
	
	
	
	
	// receives packet and acts based on packet type
	public void packetReceived(Packet packet, Socket client) throws IOException {
		new Thread(new Runnable() {			
			@Override
			public void run() {
				if(packet instanceof ConnectPacket) {
					handleConnection((ConnectPacket) packet, client);
			}
			if(packet instanceof ChatPacket) {
					try {
						handleMessage((ChatPacket) packet, client);
					} catch (IOException e) {
						e.printStackTrace();
					}
					String ms = ((ChatPacket) packet).i_username + " - " + ((ChatPacket) packet).i_message;
					String exit = ((ChatPacket) packet).i_username + " - EXIT";
					if(ms.equals(exit)) {
						Client.getInstance().ableToType(false);
						System.exit(-1);
					}
			}
			if(packet instanceof DisconnectPacket) {
				handleDisconnection((DisconnectPacket) packet, client);
			}
			if(packet instanceof ListPacket) {
				handleListing((ListPacket) packet, client);
			}
				
			}
		}).start();
	}
	
	
	private void handleListing(ListPacket packet, Socket client) {
		// handle listing
		String[] names = packet.i_username.trim().split("@");
		connectedClientMap.clear();
		for(int i = 0; i < names.length; i++) {
			connectedClientMap.add(names[i]);
		}
		Client.updateView();

	}

	private void handleMessage(ChatPacket packet, Socket client) throws IOException {
		// handle the message
		Client.getInstance().showMessage(packet.i_username + " - " + packet.i_message);
	}

	
	private void handleConnection(ConnectPacket packet, Socket client) {
		Client.getInstance().showMessage("<< " + packet.i_username + " has joined. >>");
	}
	
	private void handleDisconnection(DisconnectPacket packet, Socket client) {
		Client.getInstance().showMessage("<< " + packet.i_username + " has left. >>");
	}
	

	// for debugging
/*
	private void printList() {
		for(String client : connectedClientMap) {
            System.out.println(client);
        }
	}
*/
	
		
	
	public List<String> getConnectedClientMap() {
		return connectedClientMap;
	}
	
	
	
	public void sendMessage(String message) throws IOException {
		sendPacket(new ChatPacket(nickname + ";" + message));
	}
	
	public void sendPacket(Packet packet) throws IOException {
			DataOutputStream output = new DataOutputStream(socket.getOutputStream());
			output.writeUTF(packet.getOutgoingData());
			output.flush();
	}
	
} // class
